//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.file` struct is generated, and contains static references to 1 files.
  struct file {
    /// Resource file `Colors.xml`.
    static let colorsXml = Rswift.FileResource(bundle: R.hostingBundle, name: "Colors", pathExtension: "xml")
    
    /// `bundle.url(forResource: "Colors", withExtension: "xml")`
    static func colorsXml(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.colorsXml
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 3 nibs.
  struct nib {
    /// Nib `RepositoryPreviewTableView`.
    static let repositoryPreviewTableView = _R.nib._RepositoryPreviewTableView()
    /// Nib `RepositoryPreviewView`.
    static let repositoryPreviewView = _R.nib._RepositoryPreviewView()
    /// Nib `SearchRepositoryView`.
    static let searchRepositoryView = _R.nib._SearchRepositoryView()
    
    /// `UINib(name: "RepositoryPreviewTableView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.repositoryPreviewTableView) instead")
    static func repositoryPreviewTableView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.repositoryPreviewTableView)
    }
    
    /// `UINib(name: "RepositoryPreviewView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.repositoryPreviewView) instead")
    static func repositoryPreviewView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.repositoryPreviewView)
    }
    
    /// `UINib(name: "SearchRepositoryView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.searchRepositoryView) instead")
    static func searchRepositoryView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.searchRepositoryView)
    }
    
    static func repositoryPreviewTableView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.repositoryPreviewTableView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func repositoryPreviewView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.repositoryPreviewView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func searchRepositoryView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.searchRepositoryView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 1 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 4 localization keys.
    struct localizable {
      /// Value: Contributors
      static let repositoryPreviewContributors = Rswift.StringResource(key: "RepositoryPreviewContributors", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Request Validation Failed.
      static let apiErrorWrongRequest = Rswift.StringResource(key: "apiErrorWrongRequest", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: There was an error parsing this response.
      static let apiErrorParsing = Rswift.StringResource(key: "apiErrorParsing", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Unknown Api Error.
      static let apiErrorUnknown = Rswift.StringResource(key: "apiErrorUnknown", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      
      /// Value: Contributors
      static func repositoryPreviewContributors(_: Void = ()) -> String {
        return NSLocalizedString("RepositoryPreviewContributors", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Request Validation Failed.
      static func apiErrorWrongRequest(_: Void = ()) -> String {
        return NSLocalizedString("apiErrorWrongRequest", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: There was an error parsing this response.
      static func apiErrorParsing(_: Void = ()) -> String {
        return NSLocalizedString("apiErrorParsing", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Unknown Api Error.
      static func apiErrorUnknown(_: Void = ()) -> String {
        return NSLocalizedString("apiErrorUnknown", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct nib {
    struct _RepositoryPreviewTableView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "RepositoryPreviewTableView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _RepositoryPreviewView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "RepositoryPreviewView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _SearchRepositoryView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "SearchRepositoryView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try launchScreen.validate()
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
