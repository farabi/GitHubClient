//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 3 colors.
  struct color {
    /// Color `GitHubClientBlue`.
    static let gitHubClientBlue = Rswift.ColorResource(bundle: R.hostingBundle, name: "GitHubClientBlue")
    /// Color `GitHubTextGray`.
    static let gitHubTextGray = Rswift.ColorResource(bundle: R.hostingBundle, name: "GitHubTextGray")
    /// Color `GithubLightGray`.
    static let githubLightGray = Rswift.ColorResource(bundle: R.hostingBundle, name: "GithubLightGray")
    
    /// `UIColor(named: "GitHubClientBlue", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func gitHubClientBlue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.gitHubClientBlue, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "GitHubTextGray", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func gitHubTextGray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.gitHubTextGray, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "GithubLightGray", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func githubLightGray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.githubLightGray, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 6 images.
  struct image {
    /// Image `alert-circle-outline`.
    static let alertCircleOutline = Rswift.ImageResource(bundle: R.hostingBundle, name: "alert-circle-outline")
    /// Image `book`.
    static let book = Rswift.ImageResource(bundle: R.hostingBundle, name: "book")
    /// Image `comment-outline`.
    static let commentOutline = Rswift.ImageResource(bundle: R.hostingBundle, name: "comment-outline")
    /// Image `directions-fork`.
    static let directionsFork = Rswift.ImageResource(bundle: R.hostingBundle, name: "directions-fork")
    /// Image `search`.
    static let search = Rswift.ImageResource(bundle: R.hostingBundle, name: "search")
    /// Image `star`.
    static let star = Rswift.ImageResource(bundle: R.hostingBundle, name: "star")
    
    /// `UIImage(named: "alert-circle-outline", bundle: ..., traitCollection: ...)`
    static func alertCircleOutline(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.alertCircleOutline, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "book", bundle: ..., traitCollection: ...)`
    static func book(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.book, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "comment-outline", bundle: ..., traitCollection: ...)`
    static func commentOutline(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.commentOutline, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "directions-fork", bundle: ..., traitCollection: ...)`
    static func directionsFork(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.directionsFork, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "search", bundle: ..., traitCollection: ...)`
    static func search(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.search, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "star", bundle: ..., traitCollection: ...)`
    static func star(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.star, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 7 nibs.
  struct nib {
    /// Nib `CollaboratorTableViewCell`.
    static let collaboratorTableViewCell = _R.nib._CollaboratorTableViewCell()
    /// Nib `IssueTableViewCell`.
    static let issueTableViewCell = _R.nib._IssueTableViewCell()
    /// Nib `RepositoryInformationsView`.
    static let repositoryInformationsView = _R.nib._RepositoryInformationsView()
    /// Nib `RepositoryPreviewTableView`.
    static let repositoryPreviewTableView = _R.nib._RepositoryPreviewTableView()
    /// Nib `RepositoryPreviewView`.
    static let repositoryPreviewView = _R.nib._RepositoryPreviewView()
    /// Nib `RepositoryTableViewCell`.
    static let repositoryTableViewCell = _R.nib._RepositoryTableViewCell()
    /// Nib `SearchRepositoryView`.
    static let searchRepositoryView = _R.nib._SearchRepositoryView()
    
    /// `UINib(name: "CollaboratorTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.collaboratorTableViewCell) instead")
    static func collaboratorTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.collaboratorTableViewCell)
    }
    
    /// `UINib(name: "IssueTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.issueTableViewCell) instead")
    static func issueTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.issueTableViewCell)
    }
    
    /// `UINib(name: "RepositoryInformationsView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.repositoryInformationsView) instead")
    static func repositoryInformationsView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.repositoryInformationsView)
    }
    
    /// `UINib(name: "RepositoryPreviewTableView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.repositoryPreviewTableView) instead")
    static func repositoryPreviewTableView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.repositoryPreviewTableView)
    }
    
    /// `UINib(name: "RepositoryPreviewView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.repositoryPreviewView) instead")
    static func repositoryPreviewView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.repositoryPreviewView)
    }
    
    /// `UINib(name: "RepositoryTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.repositoryTableViewCell) instead")
    static func repositoryTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.repositoryTableViewCell)
    }
    
    /// `UINib(name: "SearchRepositoryView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.searchRepositoryView) instead")
    static func searchRepositoryView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.searchRepositoryView)
    }
    
    static func collaboratorTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CollaboratorTableViewCell? {
      return R.nib.collaboratorTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CollaboratorTableViewCell
    }
    
    static func issueTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> IssueTableViewCell? {
      return R.nib.issueTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? IssueTableViewCell
    }
    
    static func repositoryInformationsView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.repositoryInformationsView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func repositoryPreviewTableView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.repositoryPreviewTableView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func repositoryPreviewView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.repositoryPreviewView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func repositoryTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> RepositoryTableViewCell? {
      return R.nib.repositoryTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? RepositoryTableViewCell
    }
    
    static func searchRepositoryView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.searchRepositoryView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 1 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 10 localization keys.
    struct localizable {
      /// Value: Alert
      static let apiErrorTitle = Rswift.StringResource(key: "apiErrorTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Contributions
      static let repositoryPreviewContributions = Rswift.StringResource(key: "RepositoryPreviewContributions", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Informations
      static let repositoryPreviewInformations = Rswift.StringResource(key: "RepositoryPreviewInformations", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Issues
      static let repositoryPreviewIssues = Rswift.StringResource(key: "RepositoryPreviewIssues", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: No results.
      static let apiErrorNoResults = Rswift.StringResource(key: "apiErrorNoResults", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Ok
      static let apiErrorOk = Rswift.StringResource(key: "apiErrorOk", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Pull requests
      static let repositoryPreviewPullRequests = Rswift.StringResource(key: "RepositoryPreviewPullRequests", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Request Validation Failed.
      static let apiErrorWrongRequest = Rswift.StringResource(key: "apiErrorWrongRequest", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: There was an error parsing this response.
      static let apiErrorParsing = Rswift.StringResource(key: "apiErrorParsing", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Unknown Api Error.
      static let apiErrorUnknown = Rswift.StringResource(key: "apiErrorUnknown", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      
      /// Value: Alert
      static func apiErrorTitle(_: Void = ()) -> String {
        return NSLocalizedString("apiErrorTitle", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Contributions
      static func repositoryPreviewContributions(_: Void = ()) -> String {
        return NSLocalizedString("RepositoryPreviewContributions", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Informations
      static func repositoryPreviewInformations(_: Void = ()) -> String {
        return NSLocalizedString("RepositoryPreviewInformations", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Issues
      static func repositoryPreviewIssues(_: Void = ()) -> String {
        return NSLocalizedString("RepositoryPreviewIssues", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: No results.
      static func apiErrorNoResults(_: Void = ()) -> String {
        return NSLocalizedString("apiErrorNoResults", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Ok
      static func apiErrorOk(_: Void = ()) -> String {
        return NSLocalizedString("apiErrorOk", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Pull requests
      static func repositoryPreviewPullRequests(_: Void = ()) -> String {
        return NSLocalizedString("RepositoryPreviewPullRequests", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Request Validation Failed.
      static func apiErrorWrongRequest(_: Void = ()) -> String {
        return NSLocalizedString("apiErrorWrongRequest", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: There was an error parsing this response.
      static func apiErrorParsing(_: Void = ()) -> String {
        return NSLocalizedString("apiErrorParsing", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Unknown Api Error.
      static func apiErrorUnknown(_: Void = ()) -> String {
        return NSLocalizedString("apiErrorUnknown", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
    try nib.validate()
  }
  
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _IssueTableViewCell.validate()
      try _RepositoryTableViewCell.validate()
      try _SearchRepositoryView.validate()
    }
    
    struct _CollaboratorTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "CollaboratorTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CollaboratorTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CollaboratorTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _IssueTableViewCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "IssueTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> IssueTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? IssueTableViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "alert-circle-outline", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'alert-circle-outline' is used in nib 'IssueTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "comment-outline", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'comment-outline' is used in nib 'IssueTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
          if UIKit.UIColor(named: "GitHubTextGray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'GitHubTextGray' is used in storyboard 'IssueTableViewCell', but couldn't be loaded.") }
        }
      }
      
      fileprivate init() {}
    }
    
    struct _RepositoryInformationsView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "RepositoryInformationsView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _RepositoryPreviewTableView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "RepositoryPreviewTableView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _RepositoryPreviewView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "RepositoryPreviewView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _RepositoryTableViewCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "RepositoryTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> RepositoryTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? RepositoryTableViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "book", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'book' is used in nib 'RepositoryTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "directions-fork", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'directions-fork' is used in nib 'RepositoryTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "star", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'star' is used in nib 'RepositoryTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
          if UIKit.UIColor(named: "GitHubClientBlue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'GitHubClientBlue' is used in storyboard 'RepositoryTableViewCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "GitHubTextGray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'GitHubTextGray' is used in storyboard 'RepositoryTableViewCell', but couldn't be loaded.") }
        }
      }
      
      fileprivate init() {}
    }
    
    struct _SearchRepositoryView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SearchRepositoryView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "search", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'search' is used in nib 'SearchRepositoryView', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
          if UIKit.UIColor(named: "GithubLightGray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'GithubLightGray' is used in storyboard 'SearchRepositoryView', but couldn't be loaded.") }
        }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try launchScreen.validate()
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
